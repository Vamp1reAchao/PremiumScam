import telebot
from telebot import types
import random
from settings import *
from database import *

bot = telebot.TeleBot(TOKEN)

markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
work = types.KeyboardButton(text="‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–Ω—Å—ã")
roll = types.KeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É")
profile = types.KeyboardButton(text='ü§ë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
exs = types.KeyboardButton(text="üí∞ –ó–∞–¥–∞–Ω–∏—è")
markup2.row(work, roll)
markup2.row(profile)
markup2.row(exs)

@bot.message_handler(commands=['start'])
def handle_start(message):
    args = message.text.split()
    user_id = message.from_user.id
    username = message.from_user.username or f"User{user_id}"
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    markup = types.InlineKeyboardMarkup()
    share = types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=ref_link)
    markup.add(share)
    
    start = types.BotCommand(command='start', description='‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    why = types.BotCommand(command='why', description='üöÄ –ó–∞—á–µ–º –Ω—É–∂–µ–Ω Telegram Premium?')

    bot.set_my_commands([start, why])
    bot.set_chat_menu_button(
    chat_id=message.chat.id,
    menu_button=types.MenuButtonCommands()
    )
    
    if not user_exists(user_id):
        referral_id = None
        if len(channel_ids) > 0:
            if check_subscription(user_id, channel_ids):
                return
            
        if len(args) > 1 and args[1].isdigit():
            referral_id = int(args[1])
            if user_exists(referral_id):
                bot.send_message(referral_id, f"<b>‚òëÔ∏è –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n\n–í–∞—à —à–∞–Ω—Å –ø–æ–≤—ã—à–µ–Ω –Ω–∞ 0.1 %\n\n–ü–µ—Ä–µ—à–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî {ref_link}</b>", parse_mode='HTML')
                increment_referrals(referral_id)
                increment_chance(referral_id, 0.1)

        add_user(user_id, username, referral_id)
        bot.send_message(user_id, "‚≠ê", reply_markup=markup2)
        bot.send_message(user_id, f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏ Telegram Premium –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
    else:
        if len(channel_ids) > 0:
            if check_subscription(user_id, channel_ids):
                return
        bot.send_message(user_id, "‚≠ê", reply_markup=markup2)
        bot.send_message(user_id, f"<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏ Telegram Premium –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
@bot.message_handler(commands=['why'])
def handle_why(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    if user_exists(user_id):
        bot.send_message(user_id, f"üíé <b>–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å Telegram Premium?</b>\n\n"
                                  f"üîì <b>–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:</b>\n"
                                  f"‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                                  f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
                                  f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –µ—â–µ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
                                  f"üöÄ <b>–ë—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ:</b>\n"
                                  f"‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
                                  f"‚Ä¢ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏\n"
                                  f"‚Ä¢ –†–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                                  f"üåü <b>–í—ã–¥–µ–ª–∏—Å—å —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
                                  f"‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏\n"
                                  f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\n"
                                  f"‚Ä¢ –†–µ–∂–∏–º ¬´–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å¬ª –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n"
                                  f"üéâ <b>–ü—Ä–µ–º–∏—É–º ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞, –∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram!</b>\n\n"
                                  f"<i>–ü–µ—Ä–µ—Å—ã–ª–∞–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É ‚Äî {ref_link}</i>", parse_mode='HTML')
    else:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        

@bot.message_handler(commands=['adminpanel'])
def adminpanel(message):
    if message.from_user.id in admins:
        admin_markup = types.InlineKeyboardMarkup(row_width=2)
        add_chance = types.InlineKeyboardButton(text="‚≠êÔ∏è –í—ã–¥–∞—Ç—å —à–∞–Ω—Å—ã", callback_data="add_chance")
        remove_chance = types.InlineKeyboardButton(text="‚≠êÔ∏è –°–Ω—è—Ç—å —à–∞–Ω—Å—ã", callback_data="remove_chance")
        mailing = types.InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")
        add_channel = types.InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")
        remove_channel = types.InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='delete_channel')
        mailing_zero_refs = types.InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞ 0 —Ä–µ—Ñ", callback_data='mailing_zero_refs')
        
        admin_markup.row(add_chance, remove_chance)
        admin_markup.row(mailing)
        admin_markup.row(add_channel, remove_channel)
        admin_markup.row(mailing_zero_refs)
        bot.send_message(message.chat.id, f"<b>üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_user_count()}</b>", parse_mode='HTML', reply_markup=admin_markup)

@bot.message_handler(func=lambda message: True)
def hadnler_reply_buttons(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    
    if message.text == "‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–Ω—Å—ã":
        markup = types.InlineKeyboardMarkup()
        share = types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=ref_link)
        markup.add(share)
        bot.send_message(message.chat.id, f"<b>üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –ø–æ–ª—É—á–∞–π +0.1 % —à–∞–Ω—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É:\n\n‚Ä¢ –≤ –õ–° –∑–Ω–∞–∫–æ–º—ã–º\n‚Ä¢ –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª\n‚Ä¢ –ø–æ —á—É–∂–∏–º –≥—Ä—É–ø–ø–∞–º\n‚Ä¢ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö —Ç–∏–∫ —Ç–æ–∫–∞\n‚Ä¢ –≤–∫/–∏–Ω—Å—Ç/–≤–∞—Ç—Å–∞–ø –∏ –¥—Ä. —Å–æ—Ü —Å–µ—Ç–∏\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML', reply_markup=markup)
    elif message.text == "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É":
        user_data = get_user(user_id)
        if user_data:
            chance = get_user_chance(user_id)
            randozed = random.randint(70, 100)
            if randozed <= chance:
                bot.send_message(message.chat.id, "<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Telegram Premium!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–æ–≤—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>", parse_mode='HTML')
                detele_chances(user_id, 0)
                for admin in admins:
                    bot.send_message(admin, f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data[1]} | {user_data[0]} –≤—ã–∏–≥—Ä–∞–ª Telegram Premium!</b>", parse_mode='HTML')
            else:
                detele_chances(user_id, 0)
                bot.send_message(message.chat.id, f"<b>‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ Telegram Premium.\n\n–í—ã–ø–∞–ª–æ: {randozed}%\n\n–í–∞—à–∏ —à–∞–Ω—Å—ã: {chance}%</b>", parse_mode='HTML')
    elif message.text == "ü§ë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user_data = get_user(user_id)
        if user_data:
            count_refs = user_data[3]
            chance = str(user_data[2])
            rolled = user_data[5]
            bot.send_message(user_id, f"<b>üéâ –®–∞–Ω—Å—ã: {chance[:4]}%\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_refs}\n\nüé≤ –ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ: {rolled} —Ä–∞–∑\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ - {ref_link}</b>", parse_mode='HTML')
        else:
            bot.send_message(user_id, "<b>‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>", parse_mode='HTML')
    elif message.text == "üí∞ –ó–∞–¥–∞–Ω–∏—è":
        bot.send_message(user_id, "<b>üéØ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ!</b>", parse_mode='HTML')
    else:
        bot.send_message(user_id, f"<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!</b>", parse_mode='HTML', reply_markup=markup2)
        
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    username = call.from_user.username
    
    if call.data == "add_chance":
         bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —à–∞–Ω—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>", parse_mode='HTML')
         bot.register_next_step_handler(call.message, add_chance)
    if call.data == "remove_chance":
         bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —à–∞–Ω—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>", parse_mode='HTML')
         bot.register_next_step_handler(call.message, delete_chance)
    if call.data == "mailing":
         bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", parse_mode='HTML')
         bot.register_next_step_handler(call.message, send_mailing)
    if call.data == "add_channel":
        bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        bot.register_next_step_handler(call.message, add_channel)
    if call.data == 'delete_channel':
        bot.send_message(user_id, "<b>–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞:</b>", parse_mode='HTML')
        bot.register_next_step_handler(call.message, delete_channel)
    if call.data == 'mailing_zero_refs':
        text = "‚ÅâÔ∏èü§®–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ 1 –¥—Ä—É–≥–∞!\n\n–ü–µ—Ä–µ—à–ª–∏ —Å—Å—ã–ª–∫—É —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, –∞ —Ç–∞–∫–∂–µ –ø–æ —á–∞—Ç–∞–º, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 0.1% —à–∞–Ω—Å–æ–≤ –∑–∞ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ‚§µÔ∏è"
        users = get_user_zero_referrals()
         
        for user in users:
             user_id = user[0]
             ref_link = f"\n\n–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî https://t.me/{bot.get_me().username}?start={user_id}"
             full_text = f"{text}{ref_link}"
             
             try:
                 bot.send_message(user_id, f"<b>{full_text}</b>", parse_mode='HTML')
                 print(f"[–†–ê–°–°–´–õ–ö–ê 1.0] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
             except Exception as e:
                 print(f"[–†–ê–°–°–´–õ–ö–ê 1.0] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
    if call.data == "check_subs":
        user_id = call.from_user.id
        markup = types.InlineKeyboardMarkup()
        share = types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=ref_link)
        markup.add(share)
        if check_subscription(user_id, channel_ids):
            return
        bot.send_message(user_id, "‚≠ê", reply_markup=markup2)
        bot.send_message(user_id, "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏ Telegram Premium –∑–∞ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞</b>", parse_mode='HTML', reply_markup=markup)
        
def delete_channel(message):
    try:
        channel_id = int(message.text)
        if channel_id in channel_ids:
            channel_ids.remove(channel_id)
            bot.send_message(message.chat.id, "<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "<b>‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!</b>", parse_mode='HTML')

def add_channel(message):
    try:
        channel_id = int(message.text)
        channel_ids.append(channel_id)
        bot.send_message(message.chat.id, "<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞!</b>", parse_mode='HTML')

def add_chance(message):
    try:
        user_id, chance = map(int, message.text.split(':'))
        increment_chance(user_id, chance)
        bot.send_message(message.chat.id, f"<b>‚úÖ {chance} —à–∞–Ω—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}</b>", parse_mode='HTML')
        bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {chance} —à–∞–Ω—Å–æ–≤!", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>", parse_mode='HTML')

def delete_chance(message):
    try:
        user_id, chance = map(int, message.text.split(':'))
        detele_chances(user_id, chance)
        bot.send_message(message.chat.id, f"<b>‚úÖ {chance} —à–∞–Ω—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}</b>", parse_mode='HTML')
        bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —É –≤–∞—Å {chance} —à–∞–Ω—Å–æ–≤!", parse_mode='HTML')
    except ValueError:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>", parse_mode='HTML')

def send_mailing(message):
    text = message.text
    users = get_users()
    counter = 0

    for user in users:
        user_id = user[0]
        ref_link = f"\n\n–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî https://t.me/{bot.get_me().username}?start={user_id}"
        full_text = f"{text}{ref_link}"
        
        try:
            counter += 1
            bot.send_message(user_id, f"<b>{full_text}</b>", parse_mode='HTML')
            print(f"[–†–ê–°–°–´–õ–ö–ê] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
        except Exception as e:
            print(f"[–†–ê–°–°–´–õ–ö–ê] –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")

def check_subscription(user_id, channel_ids):
    
    if not channel_ids:
        return True

    markup = types.InlineKeyboardMarkup()
    for channel_id in channel_ids:
        try:
            chat_member = bot.get_chat_member(channel_id, user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                invite_link = bot.create_chat_invite_link(channel_id, member_limit=1).invite_link
                subscribe_button = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=invite_link)
                markup.add(subscribe_button)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False

    if markup.keyboard:
        check_button = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")
        markup.add(check_button)
        bot.send_message(user_id, "<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!</b>", parse_mode='HTML', reply_markup=markup)
        return True

    return False

if __name__ == '__main__':
    bot.infinity_polling()